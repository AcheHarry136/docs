"use strict";(self.webpackChunkillusivesoulworks_docs=self.webpackChunkillusivesoulworks_docs||[]).push([[456],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>h});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(i),d=r,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return i?n.createElement(h,a(a({ref:t},c),{},{components:i})):n.createElement(h,a({ref:t},c))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<o;u++)a[u]=i[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},7407:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=i(7462),r=(i(7294),i(3905));const o={sidebar_position:2},a="Creating a Curio",l={unversionedId:"curios/Developing with Curios/curio-creation",id:"curios/Developing with Curios/curio-creation",title:"Creating a Curio",description:"A tutorial on how to attach curio capabilities to your items.",source:"@site/docs/curios/Developing with Curios/curio-creation.md",sourceDirName:"curios/Developing with Curios",slug:"/curios/Developing with Curios/curio-creation",permalink:"/curios/Developing with Curios/curio-creation",draft:!1,editUrl:"https://github.com/illusivesoulworks/docs/edit/main/docs/curios/Developing with Curios/curio-creation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Setting Up the Development Environment",permalink:"/curios/Developing with Curios/getting-started"},next:{title:"Rendering a Curio",permalink:"/curios/Developing with Curios/rendering-registry"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Attaching an <code>ICurio</code> capability",id:"attaching-an-icurio-capability",level:2},{value:"Implementing the <code>ICurioItem</code> interface",id:"implementing-the-icurioitem-interface",level:2},{value:"Registering an <code>ICurioItem</code> implementation",id:"registering-an-icurioitem-implementation",level:2},{value:"Priority",id:"priority",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-a-curio"},"Creating a Curio"),(0,r.kt)("p",null,"A tutorial on how to attach curio capabilities to your items."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Curios comes with interfaces that you can attach to your items in order to define certain behaviors for those items when\ninteracting with curios slots. This includes events such as ticking while in a curio slot or triggering certain actions\nwhen equipped or unequipped into a curio slot."),(0,r.kt)("p",null,"There are three main ways to implement the capability on your item: directly attaching an ",(0,r.kt)("inlineCode",{parentName:"p"},"ICurio")," implementation as a\ncapability, extending the ",(0,r.kt)("inlineCode",{parentName:"p"},"ICurioItem")," interface on your item, or registering an ",(0,r.kt)("inlineCode",{parentName:"p"},"ICurioItem")," implementation to an item."),(0,r.kt)("p",null,"Only ",(0,r.kt)("strong",{parentName:"p"},"one")," of these methods needs to be implemented for the curio item to work."),(0,r.kt)("h2",{id:"attaching-an-icurio-capability"},"Attaching an ",(0,r.kt)("inlineCode",{parentName:"h2"},"ICurio")," capability"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"This is recommended for mods that are Forge-oriented, due to the use of capabilities, and want to attach the\ncapability optionally to their own items or another mod's items."),(0,r.kt)("p",null,"To attach the capability to your own items, override the ",(0,r.kt)("inlineCode",{parentName:"p"},"IForgeItem#initCapabilities")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic ICapabilityProvider initCapabilities(ItemStack stack, CompoundTag unused) {\n    return CuriosApi.createCurioProvider(new ICurio() {\n    \n        @Override\n        public ItemStack getStack() {\n          return stack;\n        }\n\n        @Override\n        public void curioTick(SlotContext slotContext) {\n          // ticking logic here\n        }\n    });\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ICurio")," implementation in the example can be replaced or extended by your own custom implementation. The\nimplementation can also exist in a separate class altogether as long as the instantiation is still done in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"IForgeItem#initCapabilities")," method."),(0,r.kt)("p",null,"To attach the capability to any item, including vanilla's and other mods', subscribe to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"AttachCapabilitiesEvent<ItemStack>")," and use its methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@SubscribeEvent\npublic void attachCapabilities(AttachCapabilitiesEvent<ItemStack> evt) {\n    ItemStack stack = evt.getObject();\n    Item item = stack.getItem();\n    evt.addCapability(CuriosCapability.ID_ITEM, CuriosApi.createCurioProvider(new ICurio() {\n    \n        @Override\n        public ItemStack getStack() {\n          return stack;\n        }\n        \n        @Override\n        public void curioTick(SlotContext slotContext) {\n          // ticking logic here\n        }\n    }));\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You will need to pass in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemStack")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"IForgeItem#initCapabilities")," argument or the\n",(0,r.kt)("inlineCode",{parentName:"p"},"AttachCapabilitiesEvent#getObject")," result to the return of ",(0,r.kt)("inlineCode",{parentName:"p"},"ICurio#getStack")," as shown in the example. This makes sure\nthat the implementation receives the correct ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemStack")," for further curios logic. Technically, ",(0,r.kt)("inlineCode",{parentName:"p"},"ICurio#getStack")," can\nreturn any stack if proxies are needed, but the use-case for that is outside the scope of this documentation.")),(0,r.kt)("h2",{id:"implementing-the-icurioitem-interface"},"Implementing the ",(0,r.kt)("inlineCode",{parentName:"h2"},"ICurioItem")," interface"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"This is recommended for mods that want the simplest and most straightforward method, do not mind having Curios as a\nrequired dependency, and are only working with their own items."),(0,r.kt)("p",null,"To implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"ICurioItem")," interface, simply implement it on your item class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class CurioItem extends Item implements ICurioItem {\n\n  public CurioItem() {\n    super(new Item.Properties().stacksTo(1).defaultDurability(0));\n  }\n\n  @Override\n  public void curioTick(SlotContext slotContext, ItemStack stack) {\n    // ticking logic here\n  }\n}\n")),(0,r.kt)("h2",{id:"registering-an-icurioitem-implementation"},"Registering an ",(0,r.kt)("inlineCode",{parentName:"h2"},"ICurioItem")," implementation"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"This is recommended for multi-loader mods as a platform-agnostic method of registering Curios behavior to their own\nitems or another mod's items that can be loaded optionally."),(0,r.kt)("p",null,"To register an ",(0,r.kt)("inlineCode",{parentName:"p"},"ICurioItem")," implementation, first create the implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class CurioItem implements ICurioItem {\n\n  @Override\n  public void curioTick(SlotContext slotContext, ItemStack stack) {\n    // ticking logic here\n  }\n}\n")),(0,r.kt)("p",null,"And then register it by using ",(0,r.kt)("inlineCode",{parentName:"p"},"CurioApi#registerCurio"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"CuriosApi.registerCurio(CurioModItems.MY_ITEM, new CurioItem());\n")),(0,r.kt)("p",null,"Registration can occur at any time, but for simplicity can be called during the ",(0,r.kt)("inlineCode",{parentName:"p"},"FMLCommonSetupEvent")," phase during mod\nloading:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Mod("CurioMod")\npublic class CurioMod {\n  \n  public CurioMod() {\n    final IEventBus eventBus = FMLJavaModLoadingContext.get().getModEventBus();\n    eventBus.addListener(this::setup);\n  }\n\n  private void setup(final FMLCommonSetupEvent evt) {\n    CuriosApi.registerCurio(CurioModItems.MY_ITEM, new CurioItem());\n  }\n}\n')),(0,r.kt)("h2",{id:"priority"},"Priority"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"In situations where multiple implementations are registered to the same item, there a few things to take note of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only one implementation will be used on any one item, any other implementations found will be ignored."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ICurio")," capabilities initialized through ",(0,r.kt)("inlineCode",{parentName:"li"},"IForgeItem#initCapabilities")," will always be prioritized and other\nimplementations will be ignored."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ICurioItem")," implementations registered through ",(0,r.kt)("inlineCode",{parentName:"li"},"CuriosApi#registerCurio")," will be prioritized over ",(0,r.kt)("inlineCode",{parentName:"li"},"ICurioItem"),"\nimplementations directly on the item class.")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkillusivesoulworks_docs=self.webpackChunkillusivesoulworks_docs||[]).push([[551],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,f=d["".concat(s,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6497:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:4},o="Customizing Diet Suites",l={unversionedId:"diet/diet-suites",id:"diet/diet-suites",title:"Customizing Diet Suites",description:"A tutorial on how to customize suites of food groups and diet effects.",source:"@site/docs/diet/diet-suites.md",sourceDirName:"diet",slug:"/diet/diet-suites",permalink:"/diet/diet-suites",draft:!1,editUrl:"https://github.com/illusivesoulworks/docs/edit/main/docs/diet/diet-suites.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Categorizing Food to Groups",permalink:"/diet/food-classification"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Directory",id:"directory",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Customizing Effects",id:"customizing-effects",level:2},{value:"Attribute Modifiers",id:"attribute-modifiers",level:3},{value:"Fields",id:"fields",level:3},{value:"Status Effects",id:"status-effects",level:2},{value:"Fields",id:"fields-1",level:3},{value:"Conditions",id:"conditions",level:2},{value:"Fields",id:"fields-2",level:3},{value:"Example",id:"example",level:2},{value:"Built-in Diet Suite",id:"built-in-diet-suite",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"customizing-diet-suites"},"Customizing Diet Suites"),(0,i.kt)("p",null,"A tutorial on how to customize suites of food groups and diet effects."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Diet suites are a collection of food groups and effects that are applied to the player based on the values of those\nfood groups. A player can only have one existing diet suite at a time, but an instance can have as many diet suites as\nit needs. Suites exist on a per-player basis and players can have a different suite than another."),(0,i.kt)("p",null,"Suites are divided into two major components: food groups and effects. Effects are further divided into three major\ncomponents: status effects, attribute modifiers, and conditions."),(0,i.kt)("h2",{id:"directory"},"Directory"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"The file should be a ",(0,i.kt)("inlineCode",{parentName:"p"},".json")," file located in the ",(0,i.kt)("inlineCode",{parentName:"p"},"~/data/(namespace)/diet/suites/")," folder of the datapack."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The file can be named anything."),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"(namespace)")," field should be replaced by the namespace chosen for this portion of the datapack. If this is a part\nof a mod, the namespace is usually the mod ID. If this is part of a user-defined datapack, then the namespace can be\nanything that is lowercased with no special characters.")),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"The structure of the ",(0,i.kt)("inlineCode",{parentName:"p"},".json")," file for the suite configuration consists of a top-level JSON object that holds three\npotential fields."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"replace"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If true, the file will override pre-existing suites of the same name instead of adding the arrays together."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"groups"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"An array of food group ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," entries as defined by ",(0,i.kt)("a",{parentName:"li",href:"/diet/diet-groups"},"Customizing Food Groups"),"."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"effects"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"An array of effects to apply to the player as defined by ",(0,i.kt)("a",{parentName:"li",href:"#customizing-effects"},"Customizing Effects"),".")))),(0,i.kt)("h2",{id:"customizing-effects"},"Customizing Effects"),(0,i.kt)("p",null,"Dietary effects are custom status effects or attribute modifiers applied to players when certain conditions are met.\nEach effect entry is divided into three different components: attribute modifiers, status effects, and conditions.\nEffects can have multiple attribute modifiers, status effects, and conditions tied to a single entry."),(0,i.kt)("h3",{id:"attribute-modifiers"},"Attribute Modifiers"),(0,i.kt)("p",null,"An attribute modifier represents a direct modifier to an entity attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "effects": [\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.movement_speed",\n          "operation": "multiply_base",\n          "amount": 0.25\n        }\n      ]\n    }\n  ]\n}\n')),(0,i.kt)("h3",{id:"fields"},"Fields"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The namespaced registry name of the entity attribute to apply this entry on."),(0,i.kt)("li",{parentName:"ul"},"List of vanilla Minecraft entity attribute names:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Max Health - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.max_health"')),(0,i.kt)("li",{parentName:"ul"},"Knockback Resistance - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.knockback_resistance"')),(0,i.kt)("li",{parentName:"ul"},"Movement Speed - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.movement_speed"')),(0,i.kt)("li",{parentName:"ul"},"Attack Damage - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.attack_damage"')),(0,i.kt)("li",{parentName:"ul"},"Attack Knockback - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.attack_knockback"')),(0,i.kt)("li",{parentName:"ul"},"Attack Speed - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.attack_speed"')),(0,i.kt)("li",{parentName:"ul"},"Armor - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.armor"')),(0,i.kt)("li",{parentName:"ul"},"Armor Toughness - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.armor_toughness"')),(0,i.kt)("li",{parentName:"ul"},"Luck - ",(0,i.kt)("inlineCode",{parentName:"li"},'"minecraft:generic.luck"'))))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"operation")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The type of operation to perform on the entity attribute"),(0,i.kt)("li",{parentName:"ul"},"Possible values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"multiply_total"')," - Increment the attribute by (value * amount)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"multiply_base"')," - Increment the attribute by (base * amount)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"add"')," - Increment the attribute by the amount")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"amount")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"decimal")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The amount to use for the operation on the attribute modifier")),(0,i.kt)("h2",{id:"status-effects"},"Status Effects"),(0,i.kt)("p",null,"A status effect represents a status effect applied to an entity."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "effects": [\n    {\n      "status_effects": [\n        {\n          "name": "minecraft:hunger",\n          "power": 3\n        }\n      ]\n    }\n  ]\n}\n')),(0,i.kt)("h3",{id:"fields-1"},"Fields"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The namespaced registry name of the potion effect to apply")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"power")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"integer")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The integer amount representing the strength of the potion effect")),(0,i.kt)("h2",{id:"conditions"},"Conditions"),(0,i.kt)("p",null,"A condition is an entry defining a test that needs to pass in order to activate the corresponding effect. There can be\nmultiple conditions for a single effect, and all conditions must pass in order to activate the effect."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "effects": [\n    {\n      "conditions": [\n        {\n          "groups": ["sugars", "proteins"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    }\n  ]\n}\n')),(0,i.kt)("h3",{id:"fields-2"},"Fields"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"groups")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"string[]")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A list of groups that this condition is testing against"),(0,i.kt)("li",{parentName:"ul"},"The names correspond to the names given to the groups in the ",(0,i.kt)("inlineCode",{parentName:"li"},"diet-groups.toml")," configuration")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"above")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"decimal")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A decimal value between ",(0,i.kt)("inlineCode",{parentName:"li"},"0.0")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"1.0")," that indicates the lower bound that the value must be at or above")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"below")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"decimal")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A decimal value between ",(0,i.kt)("inlineCode",{parentName:"li"},"0.0")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"1.0")," that indicates the upper bound that the value must be at or below")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"match")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The match method used for the condition testing"),(0,i.kt)("li",{parentName:"ul"},"Possible values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"all"')," - Condition passes if all the groups meet the threshold."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"any"')," - Condition passes if any the groups meet the threshold."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"average"')," - Condition passes if the average value of the groups meets the threshold."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"none"')," - Condition passes if none of the groups meet the threshold."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"every"')," - Condition passes if at least one group meets the threshold. In addition, looks for each group that passes the condition and amplifies the effect's power for each one.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Example: If three groups pass an ",(0,i.kt)("inlineCode",{parentName:"li"},'"every"'),' test, then a "Strength I" potion effect becomes "Strength III"')))))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "replace": false,\n  "groups": [\n    "fruits",\n    "grains",\n    "proteins",\n    "sugars",\n    "vegetables"\n  ],\n  "effects": [\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.max_health",\n          "operation": "add",\n          "amount": 2.0\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["proteins", "fruits", "vegetables", "grains"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    },\n    {\n      "status_effects": [\n        {\n          "name": "minecraft:hunger",\n          "power": 3\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["sugars"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    }\n  ]\n}\n')),(0,i.kt)("p",null,"This configuration will grant ",(0,i.kt)("inlineCode",{parentName:"p"},"2.0")," additional ",(0,i.kt)("inlineCode",{parentName:"p"},"max_health")," when ",(0,i.kt)("inlineCode",{parentName:"p"},"all")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"proteins"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"vegetables"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"grains"),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},"fruits")," food groups are above 80% (",(0,i.kt)("inlineCode",{parentName:"p"},"0.8"),") and below or equal to 100% (",(0,i.kt)("inlineCode",{parentName:"p"},"1.0"),")."),(0,i.kt)("p",null,"In addition, there is an additional effect that grants ",(0,i.kt)("inlineCode",{parentName:"p"},"hunger")," at power ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," when ",(0,i.kt)("inlineCode",{parentName:"p"},"sugars")," is above 80% (",(0,i.kt)("inlineCode",{parentName:"p"},"0.8"),") and\nbelow or equal to 100% (",(0,i.kt)("inlineCode",{parentName:"p"},"1.0"),")."),(0,i.kt)("h2",{id:"built-in-diet-suite"},"Built-in Diet Suite"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"This is the built-in diet suite that is configured by default, aptly named ",(0,i.kt)("inlineCode",{parentName:"p"},"builtin"),". "),(0,i.kt)("details",null,(0,i.kt)("summary",null,"builtin.json"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "replace": false,\n  "groups": [\n    "fruits",\n    "grains",\n    "proteins",\n    "sugars",\n    "vegetables"\n  ],\n  "effects": [\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.max_health",\n          "operation": "add",\n          "amount": 2.0\n        },\n        {\n          "name": "minecraft:generic.attack_damage",\n          "operation": "add",\n          "amount": 2.0\n        },\n        {\n          "name": "minecraft:generic.attack_speed",\n          "operation": "multiply_total",\n          "amount": 0.1\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["proteins", "fruits", "vegetables", "grains"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    },\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.max_health",\n          "operation": "add",\n          "amount": 2.0\n        },\n        {\n          "name": "minecraft:generic.knockback_resistance",\n          "operation": "add",\n          "amount": 0.10\n        },\n        {\n          "name": "minecraft:generic.armor_toughness",\n          "operation": "add",\n          "amount": 1.0\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["proteins", "fruits", "vegetables", "grains"],\n          "match": "every",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    },\n    {\n      "attributes": [\n        {\n          "name": "minecraft:generic.movement_speed",\n          "operation": "multiply_base",\n          "amount": 0.25\n        }\n      ],\n      "status_effects": [\n        {\n          "name": "minecraft:hunger",\n          "power": 3\n        }\n      ],\n      "conditions": [\n        {\n          "groups": ["sugars"],\n          "match": "all",\n          "above": 0.8,\n          "below": 1.0\n        }\n      ]\n    }\n  ]\n}\n'))))}m.isMDXComponent=!0}}]);
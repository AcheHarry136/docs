"use strict";(self.webpackChunkillusivesoulworks_docs=self.webpackChunkillusivesoulworks_docs||[]).push([[677],{3905:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>g});var t=n(7294);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=t.createContext({}),s=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},c=function(e){var r=s(e.components);return t.createElement(u.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,g=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return n?t.createElement(g,a(a({ref:r},c),{},{components:n})):t.createElement(g,a({ref:r},c))}));function g(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2919:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=n(7462),i=(n(7294),n(3905));const o={sidebar_position:8},a="Rendering a Curio",l={unversionedId:"curios/Developing with Curios/rendering-registry",id:"curios/Developing with Curios/rendering-registry",title:"Rendering a Curio",description:"A tutorial on how to run rendering code when a specific curio item is equipped on an entity.",source:"@site/docs/curios/Developing with Curios/rendering-registry.md",sourceDirName:"curios/Developing with Curios",slug:"/curios/Developing with Curios/rendering-registry",permalink:"/curios/Developing with Curios/rendering-registry",draft:!1,editUrl:"https://github.com/illusivesoulworks/docs/edit/main/docs/curios/Developing with Curios/rendering-registry.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Creating a Curio",permalink:"/curios/Developing with Curios/curio-creation"},next:{title:"ICurioRenderer",permalink:"/curios/Developing with Curios/APIs/renderer-interface"}},u={},s=[{value:"Create an <code>ICurioRenderer</code>",id:"create-an-icuriorenderer",level:2},{value:"Example",id:"example",level:3},{value:"Register your renderer",id:"register-your-renderer",level:2},{value:"Example",id:"example-1",level:3}],c={toc:s},d="wrapper";function p(e){let{components:r,...n}=e;return(0,i.kt)(d,(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rendering-a-curio"},"Rendering a Curio"),(0,i.kt)("p",null,"A tutorial on how to run rendering code when a specific curio item is equipped on an entity."),(0,i.kt)("h2",{id:"create-an-icuriorenderer"},"Create an ",(0,i.kt)("inlineCode",{parentName:"h2"},"ICurioRenderer")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"top.theillusivec4.curios.api.client")," package, you'll find an interface called ",(0,i.kt)("inlineCode",{parentName:"p"},"ICurioRenderer"),". This interface\nneeds to be implemented on an object of your choice, as its ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," method is what will be called to run your rendering\ncode later."),(0,i.kt)("p",null,"For the full guide on the interface, see ",(0,i.kt)("a",{parentName:"p",href:"/curios/Developing%20with%20Curios/APIs/renderer-interface"},"here"),"."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class MyCurioRenderer implements ICurioRenderer {\n  \n  @Override\n  public <T extends LivingEntity, M extends EntityModel<T>> void render(ItemStack stack,\n                                                                        SlotContext slotContext,\n                                                                        PoseStack matrixStack,\n                                                                        RenderLayerParent<T, M> renderLayerParent,\n                                                                        MultiBufferSource renderTypeBuffer,\n                                                                        int light, float limbSwing,\n                                                                        float limbSwingAmount,\n                                                                        float partialTicks,\n                                                                        float ageInTicks,\n                                                                        float netHeadYaw,\n                                                                        float headPitch) {\n    // Render code goes here\n  }\n}\n")),(0,i.kt)("h2",{id:"register-your-renderer"},"Register your renderer"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Once you have an implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"ICurioRenderer"),", you need to register an instance of that to an item. This is done\nby calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," method in ",(0,i.kt)("inlineCode",{parentName:"p"},"top.theillusivec4.curios.api.client.CuriosRendererRegistry")," during the\n",(0,i.kt)("inlineCode",{parentName:"p"},"FMLClientSetupEvent")," in mod loading."),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Mod("CurioMod")\npublic class CurioMod {\n  \n  public CurioMod() {\n    final IEventBus eventBus = FMLJavaModLoadingContext.get().getModEventBus();\n    eventBus.addListener(this::clientSetup);\n  }\n\n  private void clientSetup(final FMLClientSetupEvent evt) {\n    CuriosRendererRegistry.register(CurioModItems.MY_ITEM, () -> new MyCurioRenderer());\n  }\n}\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Multiple items are allowed to share a renderer instance or type. This can be handy if your ",(0,i.kt)("inlineCode",{parentName:"p"},"ICurioRenderer"),"\nimplementation shares a lot of common code or if your items have very similar renders, in which case you may find it\nadvantageous to simply register those items with a single renderer rather than multiple.")))}p.isMDXComponent=!0}}]);